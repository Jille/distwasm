// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KingServiceClient is the client API for KingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KingServiceClient interface {
	Volunteer(ctx context.Context, opts ...grpc.CallOption) (KingService_VolunteerClient, error)
	SubmitJob(ctx context.Context, opts ...grpc.CallOption) (KingService_SubmitJobClient, error)
}

type kingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKingServiceClient(cc grpc.ClientConnInterface) KingServiceClient {
	return &kingServiceClient{cc}
}

func (c *kingServiceClient) Volunteer(ctx context.Context, opts ...grpc.CallOption) (KingService_VolunteerClient, error) {
	stream, err := c.cc.NewStream(ctx, &KingService_ServiceDesc.Streams[0], "/com.github.Jille.distwasm.KingService/Volunteer", opts...)
	if err != nil {
		return nil, err
	}
	x := &kingServiceVolunteerClient{stream}
	return x, nil
}

type KingService_VolunteerClient interface {
	Send(*VolunteerRequest) error
	Recv() (*VolunteerResponse, error)
	grpc.ClientStream
}

type kingServiceVolunteerClient struct {
	grpc.ClientStream
}

func (x *kingServiceVolunteerClient) Send(m *VolunteerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kingServiceVolunteerClient) Recv() (*VolunteerResponse, error) {
	m := new(VolunteerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kingServiceClient) SubmitJob(ctx context.Context, opts ...grpc.CallOption) (KingService_SubmitJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &KingService_ServiceDesc.Streams[1], "/com.github.Jille.distwasm.KingService/SubmitJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &kingServiceSubmitJobClient{stream}
	return x, nil
}

type KingService_SubmitJobClient interface {
	Send(*SubmitJobRequest) error
	Recv() (*SubmitJobResponse, error)
	grpc.ClientStream
}

type kingServiceSubmitJobClient struct {
	grpc.ClientStream
}

func (x *kingServiceSubmitJobClient) Send(m *SubmitJobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kingServiceSubmitJobClient) Recv() (*SubmitJobResponse, error) {
	m := new(SubmitJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KingServiceServer is the server API for KingService service.
// All implementations should embed UnimplementedKingServiceServer
// for forward compatibility
type KingServiceServer interface {
	Volunteer(KingService_VolunteerServer) error
	SubmitJob(KingService_SubmitJobServer) error
}

// UnimplementedKingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKingServiceServer struct {
}

func (UnimplementedKingServiceServer) Volunteer(KingService_VolunteerServer) error {
	return status.Errorf(codes.Unimplemented, "method Volunteer not implemented")
}
func (UnimplementedKingServiceServer) SubmitJob(KingService_SubmitJobServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}

// UnsafeKingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KingServiceServer will
// result in compilation errors.
type UnsafeKingServiceServer interface {
	mustEmbedUnimplementedKingServiceServer()
}

func RegisterKingServiceServer(s grpc.ServiceRegistrar, srv KingServiceServer) {
	s.RegisterService(&KingService_ServiceDesc, srv)
}

func _KingService_Volunteer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KingServiceServer).Volunteer(&kingServiceVolunteerServer{stream})
}

type KingService_VolunteerServer interface {
	Send(*VolunteerResponse) error
	Recv() (*VolunteerRequest, error)
	grpc.ServerStream
}

type kingServiceVolunteerServer struct {
	grpc.ServerStream
}

func (x *kingServiceVolunteerServer) Send(m *VolunteerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kingServiceVolunteerServer) Recv() (*VolunteerRequest, error) {
	m := new(VolunteerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KingService_SubmitJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KingServiceServer).SubmitJob(&kingServiceSubmitJobServer{stream})
}

type KingService_SubmitJobServer interface {
	Send(*SubmitJobResponse) error
	Recv() (*SubmitJobRequest, error)
	grpc.ServerStream
}

type kingServiceSubmitJobServer struct {
	grpc.ServerStream
}

func (x *kingServiceSubmitJobServer) Send(m *SubmitJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kingServiceSubmitJobServer) Recv() (*SubmitJobRequest, error) {
	m := new(SubmitJobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KingService_ServiceDesc is the grpc.ServiceDesc for KingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.Jille.distwasm.KingService",
	HandlerType: (*KingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Volunteer",
			Handler:       _KingService_Volunteer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubmitJob",
			Handler:       _KingService_SubmitJob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
